#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <omp.h>

#define ULLI unsigned long long int
#define USHI unsigned short int 
#define INTSIZE 268435456


/*
 Methods to generate normally distributed random variables are adapted from gennorm.c in
 https://cse.usf.edu/~kchriste/tools/gennorm.c 
 */

// double norm_box_muller(double mean, double stdev);
int rand_count(double avg, double std, int min, int max, int curr_seed, double vals_pos );

void distribute_sym_case1 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int *degrees, int **indices) ;
							
void distribute_sym_case2 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int *degrees, int **indices) ;

void distribute_square_nonsym_case1 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int up_bandwidth, int *degrees, int **indices) ;
							
void distribute_square_nonsym_case2 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int up_bandwidth, int *degrees, int **indices) ;

void distribute_rectangular ( double avg, double std, int min, int max, int id_first, int id_second, 
							int random_seed, int seed_mult, int *degrees, int **indices) ;
							
double norm_box_muller(double mean, double stdev, int seed_bm);
double calculate_std(int *arr, int arr_size, double mean);
void *safe_malloc(size_t size);
void *safe_calloc(size_t count, size_t size);
void printusage();

int main(int argc, char *argv[])
{
	double time_start = omp_get_wtime();

	int input; 
	int row_cnt, col_cnt;
	double density, cv, density_requested, cv_requested;
	double avg, std, avg_requested, std_requested;
	ULLI nnz, nnz_requested;
	int min, max, min_requested, max_requested;
	double imbalance, imbalance_requested;
	int up_bandwidth, low_bandwidth;
	
	imbalance = -1.0;
	density = 0.001;
	cv = 0.5;
	min = 1;
	
	int is_column = 0;
	int random_seed = 1;
	int outfile_entered=0;
	int print_header = 0;
	int print_debug = 0;
	int write_matrix = 1;

	char outfile[200];
	
	if (argc <= optind)
		printusage();
	
	row_cnt = atoi(argv[1]);
	col_cnt = atoi(argv[2]);
	
	int is_symmetric = 0;
	int is_square = 0;
	if (row_cnt == col_cnt){ //if square
		is_square =1;
	}
	
	up_bandwidth = low_bandwidth = row_cnt-1;
	
	
	while ((input = getopt(argc, argv, "d:s:c:m:i:v:u:l:r:o:h:b:w:")) != -1)
    {
		switch (input)
		{	
			
			case 'd': 	density = atof(optarg);
				break;
				
			case 's': 	is_symmetric = atoi(optarg);
				break;
				
			case 'c': 	is_column = atoi(optarg);
				break;

			case 'm': 	min = atoi(optarg);
				break;
				
			case 'i': 	imbalance = atof(optarg);
				break;
			  
			case 'v': 	cv = atof(optarg);
				break;
				
			case 'u': 	up_bandwidth = atoi(optarg);
				break;

			case 'l': 	low_bandwidth = atoi(optarg);
				break;
				
			case 'r':  random_seed = atoi(optarg);
				break;
		
			case 'o':	sprintf(outfile, "%s", optarg);
				outfile_entered = 1;
				break;
			
			case 'h':  print_header = atoi(optarg);
				break;
			
			case 'b':  print_debug = atoi(optarg);
				break;
				
			case 'w':  write_matrix = atoi(optarg);
				break;
				
		}
	}
	
	if (print_debug) printf(" \n ***STARTING... \n ");
		
    if (outfile_entered==0)
    {
		sprintf(outfile, "%s", "generated_matrix_");
        pid_t pid = getpid();
        char pid_str[16];
        snprintf(pid_str, sizeof(pid_str), "%d", pid);
        strcat(strcat(outfile, pid_str), ".mtx");
	}
	
	srand(random_seed);
	
	if (is_symmetric){
		up_bandwidth = low_bandwidth;
		
		if (!is_square){
			printf("\n ERROR: Symmetric but not square !!! \n");
			exit(1); 
		}
	}
	
	
	if (print_header){
		printf("name \t seed \t rows \t cols \t ");
		printf("up_bandwidth \t low_bandwidth \t ");
		printf("request \t result \t ratio \t ");
		printf("threads \t TIME \t time_nz \t time_write \t time_total \n");
	}
	
	printf("%s \t %d \t ", outfile, random_seed);
	printf("%d \t %d \t", row_cnt, col_cnt);
	printf("%d \t %d \t", up_bandwidth, low_bandwidth);
	
	
	int id_first = row_cnt;
	int id_second = col_cnt;
	
	if (is_column && !is_square){
		id_first = col_cnt;
		id_second = row_cnt;
	}
	
	avg = density * id_second;
	std = cv * avg;
	nnz = (ULLI) (avg * id_first );
	
	max = id_second-1;
	
	if (imbalance != -1.0){
		max = (int) round (imbalance * avg + avg);
	}
	
	if (max > id_second-1){
		max = id_second-1;
	}

	nnz_requested = nnz;
	avg_requested = avg;
	density_requested = density;
	std_requested = std;
	min_requested = min;
	max_requested = max;
	cv_requested = cv;
	imbalance_requested = imbalance;
	

	int **indices = (int **)safe_malloc(id_first * sizeof(int *));
	int *degrees = (int *)safe_malloc(id_first * sizeof(int *));
	
	if (print_debug) printf(" \n ***START_INDICES... \n ");
	
	double time_start1 = omp_get_wtime();
	
	if (is_square){ //if square
		if (is_symmetric){
		
			int r2 = row_cnt / 2;
		
			if (low_bandwidth < r2){	//first case for symmetric matrices
				
				distribute_sym_case1 (  avg,  std,  min,  max,  id_first,  
							 random_seed, 2, low_bandwidth, degrees, indices) ;
				
			}
			
			else{  // low_bandwidth > r2, second case for symmetric matrices
				
				distribute_sym_case2 (  avg,  std,  min,  max,  id_first,  
							 random_seed, 3, low_bandwidth, degrees, indices) ;
			}
		}
		else{ // not symmetric but square
			int ru = row_cnt - up_bandwidth;
			
			if ( low_bandwidth > ru ){// first case for nonsymmetric square matrices
			
				distribute_square_nonsym_case1 (  avg,  std,  min,  max,  id_first,  
							 random_seed, 4, low_bandwidth, up_bandwidth, degrees, indices) ;
							
			}
			else{ // second case for nonsymmetric square matrices
			
				distribute_square_nonsym_case2 (  avg,  std,  min,  max,  id_first,  
							 random_seed,5, low_bandwidth, up_bandwidth, degrees, indices) ;
			
			}
		}
	}
	else{ // rectangular matrix
	
		distribute_rectangular ( avg, std, min, max, id_first, id_second, 
							random_seed, 6, degrees, indices) ;
	}
	
	
	
	double time_nz = omp_get_wtime() - time_start1;

	nnz = 0;
	min = id_second;
	max = 0;
	
	for (ULLI j = 0; j < id_first; j++){
		int curr_degree = degrees[j];
		nnz += degrees[j];
		if (curr_degree < min)
			min = curr_degree;
		if (curr_degree > max)
			max = curr_degree;
	}
		
	if (print_debug) printf(" \n ***INDICES_DONE \n ");

	time_start1 = omp_get_wtime();
	
	
	if (write_matrix){
		
		FILE *fptr;
		fptr = fopen(outfile, "w");
		if( fptr == NULL ) {
			printf ("\n *** ERROR WHILE OPENING OUT FILE ! *** \n\n");
			exit(1);  
		}
		
		if (is_symmetric){
			fprintf(fptr, "%c%cMatrixMarket matrix coordinate real symmetric\n", '%', '%');
		}
		else{
			fprintf(fptr, "%c%cMatrixMarket matrix coordinate real general\n", '%', '%');
		}
		
		fprintf(fptr, "%d %d %lld\n", row_cnt, col_cnt, nnz);

		if (is_column ==0){
			for (int i = 0; i < row_cnt; i++){
				// fprintf(fptr, "%d %d %d ", ind_0[n]+1, ind_1[n]+1, ind_2[n]+1);
				for (int j = 0; j < degrees[i]; j++){	
					fprintf(fptr, "%d %d ", i+1, indices[i][j]+1);
					fprintf(fptr, "%.1f\n", (rand() % 9 + 1.0) / 10 );	// random numbers between 0.1 and 0.9 
					// fprintf(fptr, "%.1f\n", (double)rand() / RAND_MAX + 0.1 );
				}
			}
		}
		
		if (is_column ==1){
			for (int i = 0; i < col_cnt; i++){
				// fprintf(fptr, "%d %d %d ", ind_0[n]+1, ind_1[n]+1, ind_2[n]+1);
				for (int j = 0; j < degrees[i]; j++){	
					fprintf(fptr, "%d %d ", indices[i][j]+1, i+1);
					fprintf(fptr, "%.1f\n", (rand() % 9 + 1.0) / 10 );	// random numbers between 0.1 and 0.9 
					// fprintf(fptr, "%.1f\n", (double)rand() / RAND_MAX + 0.1 );
				}
			}
		}
		
		fclose(fptr);
	}

	double time_end = omp_get_wtime();
	
	if(is_symmetric){
		nnz = 2*nnz - row_cnt;
	}
	
	avg = (nnz + 0.0) / id_first;
	density =  avg / id_second ;
	std = calculate_std(degrees, id_first, avg);
	cv = std / avg;
	imbalance = ( max - avg ) / avg;
	
	printf("nnz \t %llu \t %llu \t ", nnz_requested, nnz );
	printf("density \t %g \t %g \t %g \t ", density_requested, density, density / density_requested);
	printf("avg \t %g \t %g \t %g \t ", avg_requested, avg, avg/avg_requested );
	printf("std \t %g \t %g \t %g \t ", std_requested, std, std/std_requested );
	printf("cv \t %g \t %g \t %g \t ", cv_requested, cv, cv/cv_requested );
	printf("min \t %d \t %d \t %g \t ", min_requested, min, (min+0.0)/min_requested );
	printf("max \t %d \t %d \t %g \t ", max_requested, max, (max+0.0)/max_requested );
	printf("imbalance \t %g \t %g \t %g \t ", imbalance_requested, imbalance, imbalance/imbalance_requested );

	printf("%d \t TIME \t %.7f \t %.7f \t %.7f \n ", omp_get_max_threads(), time_nz, time_end - time_start1, time_end - time_start);
	

    return 0;
}

int rand_count(double avg, double std, int min, int max, int curr_seed, double vals_pos ){
	
	int curr_degree ;
	
	if( vals_pos > 0 ){ // apply normal distribution if most values are expected to be positive
		curr_degree = (int) round ( norm_box_muller(avg, std, curr_seed));
	}
	else{ //apply log-normal distribution

		double avg_log_norm = log(avg * avg / sqrt(avg * avg + std* std));
		double std_log_norm = sqrt(log(1 + std* std / avg * avg));
		
		curr_degree =  (int) round ( exp ( norm_box_muller ( avg_log_norm, std_log_norm, curr_seed )));
	}
	
	if ( curr_degree < min ){
		curr_degree = min;
	}
	
	if ( curr_degree > max){
		curr_degree = max;
	}
	
	return curr_degree;
}



void distribute_sym_case1 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int *degrees, int **indices) 
{
	int r1 = id_first - 1;
	int r2 = id_first / 2;
	int is_r_odd = id_first % 2;
	
	double vals_pos = avg - 3 * std; // to determine whether most values are expected to be positive with normal distribution
	
	#pragma omp parallel
	{
		USHI *is_nz_ind = (USHI*) safe_malloc(id_first * sizeof(USHI));
		#pragma omp for
		for (int j = 0; j < low_bandwidth; j++){
			
			int curr_seed = random_seed*(j+seed_mult);	
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int jl = j + low_bandwidth;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % jl] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			indices[r1 - j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < j; k++) { // until diagonal
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			indices[j][curr_degree++] = j ; // make diagonal nz
			degrees[j] = curr_degree;
			
			curr_degree = 0;
			for (int k = j+1; k < j+low_bandwidth; k++) { // after diagonal
				if (is_nz_ind [k]){
					indices[r1 - j][curr_degree++] = id_first-k;
				}
			}
			indices[r1 - j][curr_degree++] = r1 - j ; // make diagonal nz
			degrees[r1 - j] = curr_degree;
		}
		
		#pragma omp for
		for (int j = low_bandwidth; j < r2; j++){
			
			int curr_seed = random_seed*(j+seed_mult);	
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int jl = j-low_bandwidth;
			int l2 = 2 * low_bandwidth;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % l2 + jl] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			indices[r1 - j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = j-low_bandwidth; k < j; k++) { // until diagonal
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			indices[j][curr_degree++] = j ; // make diagonal nz
			degrees[j] = curr_degree;
			
			curr_degree = 0;
			for (int k = j+1; k < j+low_bandwidth; k++) { // after diagonal
				if (is_nz_ind [k]){
					indices[r1 - j][curr_degree++] = id_first-k;
				}
			}
			indices[r1 - j][curr_degree++] = r1 - j ; // make diagonal nz
			degrees[r1 - j] = curr_degree;
		}
		free(is_nz_ind);
	}
	
	
	if (is_r_odd){ // extra one line if row_cnt is odd
	
		USHI *is_nz_ind = (USHI*) safe_malloc(id_first * sizeof(USHI));
		int j= r2 +1;
		
		int curr_seed = random_seed*(j+seed_mult);	
		int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

		#pragma omp parallel for
		for (int k = 0; k < id_first; k++){
			is_nz_ind [k] = 0;
		}
		
		int jl = j-low_bandwidth;
		int l2 = 2 * low_bandwidth;
		
		//randomly fill nonzero values
		for (int k = 0; k < curr_degree-1; k++){
			is_nz_ind [rand() % l2 + jl] = 1;
		}
		
		indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
		indices[r1 - j] = (int *)safe_calloc( curr_degree , sizeof(int));
		
		curr_degree = 0;
		for (int k = j-low_bandwidth; k < j; k++) { // until diagonal
			if (is_nz_ind [k]){
				indices[j][curr_degree++] = k ;
			}
		}
		indices[j][curr_degree++] = j ; // make diagonal nz
		degrees[j] = curr_degree;
		
	}
}


void distribute_sym_case2 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int *degrees, int **indices) 
{
	
	int r1 = id_first - 1;
	int r2 = id_first / 2;
	int is_r_odd = id_first % 2;
	int rl =  id_first - low_bandwidth;
	
	double vals_pos = avg - 3 * std; // to determine whether most values are expected to be positive with normal distribution
	
	#pragma omp parallel
	{
		USHI *is_nz_ind = (USHI*) safe_malloc(id_first * sizeof(USHI));
		#pragma omp for
		for (int j = 0; j < rl-1; j++){
			int curr_seed = random_seed*(j+seed_mult);	
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int jl = j+low_bandwidth;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % jl] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			indices[r1 - j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < j; k++) { // until diagonal
				if (is_nz_ind [k]){
					// if (print_debug) printf("ind[%d][%d] = %d (Until diag, before rl) \n", j, curr_degree, k);
					indices[j][curr_degree++] = k ;
				}
			}
			
			// if (print_debug) printf("ind[%d][%d] = %d (Diag, before rl) \n", j, curr_degree, j);
			indices[j][curr_degree++] = j ; // make diagonal nz
			degrees[j] = curr_degree;
			
			// int rlj = rl - 2*j;
			
			curr_degree = 0;
			for (int k = j+1; k < j+low_bandwidth; k++) { // after diagonal
				if (is_nz_ind [k]){
					// if (print_debug) printf("ind[%d][%d] = %d (After diag, before rl)  k=%d, rl=%d, j=%d \n", r1 - j, curr_degree, id_first-k, k, rl, j);
					indices[r1 - j][curr_degree++] = id_first-k;
				}
			}
			indices[r1 - j][curr_degree++] = r1 - j ; // make diagonal nz
			degrees[r1 - j] = curr_degree;
		}
		
		#pragma omp for
		for (int j = rl-1; j < r2; j++){
			int curr_seed = random_seed*(j+seed_mult);	
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % id_first] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			indices[r1 - j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < j; k++) { // until diagonal
				if (is_nz_ind [k]){
					// if (print_debug) printf("ind[%d][%d] = %d (Until diag, After rl) \n", j, curr_degree, k);
					indices[j][curr_degree++] = k ;
				}
			}
			// if (print_debug) printf("ind[%d][%d] = %d (Diag, After rl) \n", j, curr_degree, j);
			indices[j][curr_degree++] = j ; // make diagonal nz
			degrees[j] = curr_degree;
	
			// int rlj = rl - 2*j;
			
			curr_degree = 0;
			for (int k = j+1; k < id_first; k++) { // after diagonal
				if (is_nz_ind [k]){
					// if (print_debug) printf("ind[%d][%d] = %d (After diag, After rl) k=%d, rl=%d, j=%d\n", r1 - j, curr_degree, id_first-k, k, rl, j);
					// indices[id_first - j][curr_degree++] = k + rlj;
					indices[r1 - j][curr_degree++] = id_first - k;
				}
			}
			
			// if (print_debug) printf("ind[%d][%d] = %d (Diag, After rl) j=%d \n", r1 - j, curr_degree, r1 - j, j);
			indices[r1 - j][curr_degree++] = r1 - j ; // make diagonal nz
			degrees[r1 - j] = curr_degree;
		}
		free(is_nz_ind);
	}
	
	
	if (is_r_odd){ // extra one line if id_first is odd
		
		USHI *is_nz_ind = (USHI*) safe_malloc(id_first * sizeof(USHI));
		int j= r2 +1;
		int curr_seed = random_seed*(j+seed_mult);	
		int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

		#pragma omp parallel for
		for (int k = 0; k < id_first; k++){
			is_nz_ind [k] = 0;
		}
		
		//randomly fill nonzero values
		for (int k = 0; k < curr_degree-1; k++){
			is_nz_ind [rand() % id_first] = 1;
		}
		
		indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
		indices[r1 - j] = (int *)safe_calloc( curr_degree , sizeof(int));
		
		curr_degree = 0;
		for (int k = 0; k < j; k++) { // until diagonal
			if (is_nz_ind [k]){
				// if (print_debug) printf("ind[%d][%d] = %d (Until diag, r is ODD) \n", j, curr_degree, k);
				indices[j][curr_degree++] = k ;
			}
		}
		// if (print_debug) printf("ind[%d][%d] = %d (Diag, r is ODD) \n", j, curr_degree, j);
		indices[j][curr_degree++] = j ; // make diagonal nz
		degrees[j] = curr_degree;
		free(is_nz_ind);
	}
}

void distribute_square_nonsym_case1 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int up_bandwidth, int *degrees, int **indices) 
{
	int ru = id_first - up_bandwidth;
	double vals_pos = avg - 3 * std; // to determine whether most values are expected to be positive with normal distribution
	
	#pragma omp parallel
	{
		USHI *is_nz_ind = (USHI*) safe_malloc(id_first * sizeof(USHI));
		#pragma omp for
		for (int j = 0; j < ru; j++){
			
			int curr_seed = random_seed*(j+seed_mult);	
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);
			
			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			is_nz_ind [j] = 1; // make diagonal 1
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int ju = j+up_bandwidth;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % ju] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < id_first; k++) {
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			degrees[j] = curr_degree;
		}
		
		#pragma omp for
		for (int j = ru; j < low_bandwidth; j++){
			
			int curr_seed = random_seed*(j+seed_mult);
			
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			is_nz_ind [j] = 1; // make diagonal 1
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % id_first] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < id_first; k++) {
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			degrees[j] = curr_degree;
		}
		
		#pragma omp for
		for (int j = low_bandwidth; j < id_first; j++){
			
			int curr_seed = random_seed*(j+seed_mult);
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			is_nz_ind [j] = 1; // make diagonal 1
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int jl = j-low_bandwidth;
			int ijl = id_first-jl;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % ijl + jl ] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < id_first; k++) {
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			degrees[j] = curr_degree;
		}
		free(is_nz_ind);
	}
}


void distribute_square_nonsym_case2 ( double avg, double std, int min, int max, int id_first, 
							int random_seed, int seed_mult, int low_bandwidth, int up_bandwidth, int *degrees, int **indices) 
{
	int ul = up_bandwidth + low_bandwidth;
	int ru = id_first - up_bandwidth;
	double vals_pos = avg - 3 * std; // to determine whether most values are expected to be positive with normal distribution
				
	#pragma omp parallel
	{
		USHI *is_nz_ind = (USHI*) safe_malloc(id_first * sizeof(USHI));
		#pragma omp for
		for (int j = 0; j < low_bandwidth; j++){
			int curr_seed = random_seed*(j+seed_mult);
			
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			is_nz_ind [j] = 1; // make diagonal 1
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int ju = j+up_bandwidth;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % ju] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < id_first; k++) {
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			degrees[j] = curr_degree;
		}
		
		
		#pragma omp for
		for (int j = low_bandwidth; j < ru; j++){
			int curr_seed = random_seed*(j+seed_mult);
			
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			is_nz_ind [j] = 1; // make diagonal 1
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int jl = j-low_bandwidth;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % ul + jl] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < id_first; k++) {
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			degrees[j] = curr_degree;
		}
		
		#pragma omp for
		for (int j = ru; j < id_first; j++){
			int curr_seed = random_seed*(j+seed_mult);
			
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_first; k++){
				is_nz_ind [k] = 0;
			}
			
			is_nz_ind [j] = 1; // make diagonal 1
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			int jl = j-low_bandwidth;
			int ijl = id_first-jl;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree-1; k++){
				is_nz_ind [rand_r(&mystate) % ijl + jl ] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < id_first; k++) {
				if (is_nz_ind [k]){
					indices[j][curr_degree++] = k ;
				}
			}
			degrees[j] = curr_degree;
		}
		free(is_nz_ind);
	}
	
}


void distribute_rectangular ( double avg, double std, int min, int max, int id_first, int id_second, 
							int random_seed, int seed_mult, int *degrees, int **indices) 
{	
	double vals_pos = avg - 3 * std; // to determine whether most values are expected to be positive with normal distribution
	
	#pragma omp parallel
	{
		USHI *is_nz_ind = (USHI*) safe_malloc(id_second * sizeof(USHI));
		#pragma omp for
		for (int j = 0; j < id_first; j++){
			
			int curr_seed = random_seed*(j+seed_mult);
			
			int curr_degree = rand_count(avg, std, min, max, curr_seed, vals_pos);

			for (int k = 0; k < id_second; k++){
				is_nz_ind [k] = 0;
			}
			
			unsigned int mystate = curr_seed + curr_degree%10;
			
			//randomly fill nonzero values
			for (int k = 0; k < curr_degree; k++){
				is_nz_ind [rand_r(&mystate) % id_second] = 1;
			}
			
			indices[j] = (int *)safe_calloc( curr_degree , sizeof(int));
			
			curr_degree = 0;
			for (int k = 0; k < id_second; k++) {
				if (is_nz_ind [k]){
					indices[j][curr_degree] = k ;
					curr_degree++;
				}
			}
			degrees[j] = curr_degree;	
		}	
		free(is_nz_ind);
	}			
}




//===========================================================================
//=  Function to generate normally distributed random variable using the    =
//=  Box-Muller method                                                      =
//=    - Input: mean and standard deviation                                 =
//=    - Output: Returns with normally distributed random variable          =
//===========================================================================
double norm_box_muller(double mean, double stdev, int seed_bm)
{
    double u, r, theta; // Variables for Box-Muller method
    double x;           // Normal(0, 1) rv
    double norm_rv;     // The adjusted normal rv
	
	unsigned int mystate = seed_bm * 10;

    // Generate u
    u = 0.0;
    while (u == 0.0){
        // u = rand_val(0);
		u = (double)rand_r(&mystate) / RAND_MAX;
		// u = (double)rand) / RAND_MAX;
	}

    // Compute r
    r = sqrt(-2.0 * log(u));
	
	mystate = floor(mean) * seed_bm;

    // Generate theta
    theta = 0.0;
    while (theta == 0.0){
        // theta = 2.0 * 3.14159265 * rand_val(0);
		// theta = 6.2831853 * rand_val(0);
		// theta = 6.2831853 * rand() / RAND_MAX;
		theta = 6.2831853 * rand_r(&mystate) / RAND_MAX;
	}

    // Generate x value
    x = r * cos(theta);

    // Adjust x value for specified mean and variance
    norm_rv = (x * stdev) + mean;

    // Return the normally distributed RV value
    return (norm_rv);
}


double calculate_std(int *arr, int arr_size, double mean)
{

    double sqr_sum = 0;
	
	// ULLI sum = 0;
	// #pragma omp parallel for reduction(+ : sum)
	// for (int i = 0; i < arr_size; i++) {
        // sum += arr[i];
    // }
	// double mean = (sum+0.0) / arr_size;

	#pragma omp parallel for reduction(+ : sqr_sum)
    for (int i = 0; i < arr_size; i++) {
        double mean_diff = arr[i] - mean;
        sqr_sum += mean_diff * mean_diff;
    }
	
    return sqrt(sqr_sum / arr_size);
}



void *safe_malloc(size_t size)
{
    void *loc = malloc(size);
    if (loc == NULL)
    {
        printf(" genten.c : safe_malloc : Memory (%lu = %lu GB) could not be allocated\n", size, size/ INTSIZE);
        exit(1);
    }

    return loc;
}

void *safe_calloc(size_t count, size_t size)
{
    void *loc = calloc(count, size);
    if (loc == NULL)
    {
        printf(" genten.c : safe_calloc : Memory (%lu = %lu GB) could not be (c)allocated\n", size, size/ INTSIZE);
        exit(1);
    }

    return loc;
}


void printusage()
{
	printf("usage: ./genmat sizes[] [options]   \n");
	
	printf("\t-d density :\t nonzero ratio\n");
	printf("\t-s is_symmetric :\t whether the matrix is symmetric (1:yes)\n");
	printf("\t-c is_column :\t whether the degree properties are for column (1:yes)\n");
	printf("\t-m min :\t min degree value \n");
	printf("\t-i imbalance :\t (max-avg) / avg\n");
	printf("\t-v cv :\t coefficient of variation for row (column) degrees    \n");
	printf("\t-l low_bandwidth : lower matrix bandwidth (valid if matrix is square)\n");
	printf("\t-u up_bandwidth : upper matrix bandwidth (only for non-symmetric square matrices)\n");
	printf("\t-r random_seed :\t seed for randomness \n");
	printf("\t-o outfile :\t to print out the generated matrix \n");
	printf("\t-h print_header :\t to print the header names for the output values \n");
	printf("\t-b print_debug :\t to print at some main steps for debugging \n");
	printf("\t-w write_tensor :\t to write the generated matrix into a file in COO format \n");

	exit(1);
}